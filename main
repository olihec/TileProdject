import pygame
import random
 
# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

YELLOW = (255, 255, 0)
RANDOMCOLOUR = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
 
pygame.init()
 
# Set the width and height of the screen [width, height]
size = (600, 800)
screen = pygame.display.set_mode(size)

class Portal(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((40, 40))
        
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

        self.portal_image = pygame.image.load("portal.png").convert()

    def update(self):

    
        
        screen.blit(self.portal_image, [self.rect.x, self.rect.y])
        self.portal_image.set_colorkey(BLACK)

    
class Key(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((20, 20))
        
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

        self.key_image = pygame.image.load("key.png").convert()

    def update(self):

    
        
        screen.blit(self.key_image, [self.rect.x, self.rect.y])
        self.key_image.set_colorkey(BLACK)

class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((40, 40))
        
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

        self.health = 50

        self.font = pygame.font.SysFont("serif", 35)
        self.text = self.font.render(" " , True, BLACK)
        self.text_x = 10
        self.text_y = 640

        self.enemy_image = pygame.image.load("enemy.png").convert()
        
    def update(self):

        screen.blit(self.text, [self.text_x , self.text_y])
        
        screen.blit(self.enemy_image, [self.rect.x, self.rect.y])
        self.enemy_image.set_colorkey(WHITE)

class Wall(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((40, 40))
        
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

       

        self.wall_image = pygame.image.load("Wall.png").convert()

    def update(self):
        screen.blit(self.wall_image, [self.rect.x, self.rect.y])
        

class InnerWall(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((40, 40))
        
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

        


        self.wall_image = pygame.image.load("Wall.png").convert()

    def update(self):
        screen.blit(self.wall_image, [self.rect.x, self.rect.y])

class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((40, 40))
        
        self.rect = self.image.get_rect()
        self.rect.y = 360
        self.rect.x = 360
        self.x_speed = 0
        self.y_speed = 0

        self.health = 100
        self.money = 0
        self.keys = 0
        self.score = 0
        
        self.player_image = pygame.image.load("knight.png").convert()
        
        
    def move(self, x, y):
        self.y_speed = y
        self.x_speed = x

        
    



    def update(self):
        self.rect.x += self.x_speed
        self.rect.y += self.y_speed

        screen.blit(self.player_image, [self.rect.x, self.rect.y])
        self.player_image.set_colorkey(BLACK)
        if pygame.sprite.spritecollide(player, walls_list, False) :
           
            if self.x_speed < 0:
                self.x_speed = 0
                self.rect.x += 5
            if self.x_speed > 0:
                self.x_speed = 0
                self.rect.x += -5
            if self.y_speed < 0:
                self.y_speed = 0
                self.rect.y += 5
            if self.y_speed > 0:
                self.y_speed = 0
                self.rect.y += -5

        



all_sprites_list = pygame.sprite.Group() # Group for all sprites
killable_sprites_list = pygame.sprite.Group()
walls_list = pygame.sprite.Group()
enemies_list  = pygame.sprite.Group()
key_list = pygame.sprite.Group()
portal_list = pygame.sprite.Group()


maps = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
       [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
       [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
       [1,0,0,0,0,0,0,2,0,0,0,0,0,0,1],
       [1,0,2,0,0,0,0,2,2,2,2,2,0,0,1],
       [1,0,2,0,0,0,0,2,0,0,0,2,0,0,1],
       [1,0,2,0,0,0,0,2,0,0,0,2,0,0,1],
       [1,0,2,0,0,0,0,2,0,0,0,2,0,0,1],
       [1,0,2,0,0,0,0,0,0,0,0,2,0,0,1],
       [1,0,2,2,2,2,2,2,2,0,2,2,0,0,1],
       [1,0,2,0,0,0,0,0,2,0,0,0,0,0,1],
       [1,0,0,0,0,0,0,2,2,0,0,0,0,0,1],
       [1,0,0,0,0,0,0,2,2,0,0,0,0,0,1],
       [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
       [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]

enemies = 3 
emptySpots = []
for y in range(15):

    for x in range(15): 
        if maps[x][y] == 0:
            emptySpots.append([x, y])
            
        if maps[x][y] == 1:
            wall = Wall(y * 40, x * 40)
            killable_sprites_list.add(wall)
            walls_list.add(wall)
        elif maps[x][y] ==2:
            
            innerWall = InnerWall(y * 40, x * 40)
            killable_sprites_list.add(innerWall)
            walls_list.add(innerWall)

for i in range(3):
    n = random.randint(0, len(emptySpots)-1)
    enemy = Enemy(emptySpots[n][1] * 40, emptySpots[n][0] * 40)
    killable_sprites_list.add(enemy)
    enemies_list.add(enemy)
    emptySpots.pop(n)
    



player = Player()
all_sprites_list.add(player)

pygame.display.set_caption("Aarsh smells feet")
 
# Loop until the user clicks the close button.
done = False
game_over = False
level2 = False
# Used to manage how fast the screen updates
clock = pygame.time.Clock()
 
# -------- Main Program Loop -----------
while not done:
    # --- Main event loop
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        
        
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player.move(0, 5)
            elif event.key == pygame.K_UP:
                player.move(0, -5)
            elif event.key == pygame.K_LEFT:
                player.move(-5, 0)
            elif event.key == pygame.K_RIGHT:
                player.move(5, 0)
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player.move(0, 0)
            elif event.key == pygame.K_UP:
                player.move(0, 0)
            elif event.key == pygame.K_LEFT:
                player.move(0, 0)
            elif event.key == pygame.K_RIGHT:
                player.move(0, 0)

        
 
    # --- Game logic should go here

    
        
    enemy_attacked_list = pygame.sprite.spritecollide(player, enemies_list, False) 
    
    for enemy in enemy_attacked_list:   
        
        
        
    
        enemy.text = enemy.font.render("Enemy Health:  " + str(enemy.health), True, BLACK)
        
    
        if enemy.health > 0:
            player.health -= random.randint(1, 5)
            enemy.health -= random.randint(3, 15)
        else:
            enemies_beaten_list = pygame.sprite.spritecollide(player, enemies_list, True)
            for enemy in enemies_beaten_list:
                player.score += 10
                key = Key(enemy.rect.x + 10, enemy.rect.y + 10)
                killable_sprites_list.add(key)
                key_list.add(key)

        if player.x_speed < 0:
            player.x_speed = 0
            player.rect.x += 5
        if player.x_speed > 0:
            player.x_speed = 0
            player.rect.x += -5
        if player.y_speed < 0:
            player.y_speed = 0
            player.rect.y += 5
        if player.y_speed > 0:
            player.y_speed = 0
            player.rect.y += -5
            
    key_collected_list = pygame.sprite.spritecollide(player, key_list, True)
    for key in key_collected_list:
        player.keys += 1 
        if player.keys >= 3:
            portal = Portal(520, 520)
            killable_sprites_list.add(portal)
            portal_list.add(portal)
            
    portal_entered_list =  pygame.sprite.spritecollide(player, portal_list, True)
    for portal in portal_entered_list:
        player.keys = 0
        killable_sprites_list.empty()
        walls_list.empty()
        maps = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                [1,0,2,2,2,2,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                [1,0,2,2,2,2,0,0,0,0,0,0,0,0,1],
                [1,2,2,0,0,2,0,0,0,0,0,0,0,0,1],
                [1,2,2,0,0,2,0,0,0,0,0,0,0,0,1],
                [1,2,0,0,0,2,0,0,2,2,2,0,0,0,1],
                [1,0,0,0,0,0,0,0,2,0,2,0,0,0,1],
                [1,0,0,2,0,0,2,2,2,0,2,0,0,0,1],
                [1,0,0,2,0,2,2,0,0,0,2,0,0,0,1],
                [1,0,0,2,0,0,0,0,0,0,2,0,0,0,1],
                [1,0,0,2,0,0,0,0,0,2,2,2,0,0,1],
                [1,0,0,0,0,0,0,0,0,2,0,0,0,0,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]

        enemies = 3 
        emptySpots = []
        for y in range(15):

            for x in range(15): 
                if maps[x][y] == 0:
                    emptySpots.append([x, y])
                    
                if maps[x][y] == 1:
                    wall = Wall(y * 40, x * 40)
                    killable_sprites_list.add(wall)
                    walls_list.add(wall)
                elif maps[x][y] ==2:
                    
                    innerWall = InnerWall(y * 40, x * 40)
                    killable_sprites_list.add(innerWall)
                    walls_list.add(innerWall)

        for i in range(3):
            n = random.randint(0, len(emptySpots)-1)
            enemy = Enemy(emptySpots[n][1] * 40, emptySpots[n][0] * 40)
            killable_sprites_list.add(enemy)
            enemies_list.add(enemy)
            emptySpots.pop(n)    
        
        
    if player.health < 1:
        game_over = True
    
    
        
        
       
    
    
    
        
           

    
    
    # --- Screen-clearing code goes here
 
    # Here, we clear the screen to white. Don't put other drawing commands
    # above this, or they will be erased with this command.
    background_image = pygame.image.load("background.png")
    # If you want a background image, replace this clear with blit'ing the
    

    # background image.

    
    screen.fill(WHITE)
    screen.blit(background_image, [0, 0])
    all_sprites_list.update()
    killable_sprites_list.update()
    


    if game_over:
        all_sprites_list.empty()
        killable_sprites_list.empty()
        font = pygame.font.SysFont("serif", 40)
        text = font.render("Game Over", True, BLACK)
        
        screen.blit(text, [220, 300])
    else:
        # --- Drawing code should go here
        all_sprites_list.draw(screen)
        killable_sprites_list.draw(screen)

        font = pygame.font.SysFont("serif", 35)
        text = font.render("Heath: " + str(player.health) + "  Money: " + str(player.money) +"  Keys: " + str(player.keys) + "  Score: " + str(player.score), True, BLACK)
        text_x = 10
        text_y = 610
        screen.blit(text, [text_x, text_y])

    
    
    # --- Go ahead and update the screen with what we've drawn.
    pygame.display.flip()
 
    # --- Limit to 60 frames per second
    clock.tick(60)
 
# Close the window and quit.
pygame.quit()
